cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generation.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generation.R')
source('~/visulog/cli/barplot_generation.R')
x <- read.table("../commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- TRUE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
nbauth <- data.frame(table(nb))
nbauth
setwd("cli/.visulogRTempFiles")
w <- getwd()
w <- getwd()
w
w <- getwd()
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.1  # bar names size, adapt to nb of bars
lgdbon <- paste("bon (>", pcgood,"%)")
if (! tofile) if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
if (tofile) {
pdf(file = "CommitsPerAuthor.png", width=1920, height=1080) # 1920/1080 full HD png
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
}
w <- getwd()
w
w <- getwd()
w
setwd(".visulogRTempFiles")
setwd("../")
o <- getwd()
o
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
w <- getwd()
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
x <- read.table("commitsPA.txt", header = FALSE)
colnames(x)
x
colnames(x) <- c("auteurs", "nb")
x
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.1  # bar names size, adapt to nb of bars
lgdbon <- paste("bon (>", pcgood,"%)")
if (! tofile) if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
tofile
prob=T
if (! tofile) if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
tofile
tofile=F
if (! tofile) if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
auteurs
x
pct
barplot(pct)
barplot(pct, names.arg = auteurs)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits per author",
xlab="", ylab="number of commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
barplot(pct, names.arg = auteurs)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
if (tofile) {
pdf(file = "CommitsPerAuthor.pdf", width=7, height=5) # 1920/1080 full HD png
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits per author",
xlab="", ylab="number of commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
}
w <- getwd()
w
x <- read.table("commitsPA.txt", header = FALSE)
colnames(x) <- c("auteurs", "nb")
attach(x)
prob <- TRUE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 100/nrow(x) # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 100/nrow(x) # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
lgdbon <- paste(">", round(pcgood,1),"%")
lgdbad <- paste("<", round(pcgood,1),"%")
if (! tofile) if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,lgdbad), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
if (tofile) {
pdf(file = "CommitsPerAuthorPercent.pdf", width=7, height=5) # 1920/1080 full HD png
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits per author (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="", ylab="% of commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,lgdbad), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
}
etach(x)
detach(x)
detach(x)
rm(x)
x <- read.table("commitsPA.txt", header = FALSE)
colnames(x) <- c("auteurs", "nb")
attach(x)
prob <- TRUE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 100/nrow(x) # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
lgdbon <- paste(">", round(pcgood,1),"%")
lgdbad <- paste("<", round(pcgood,1),"%")
if (! tofile) if (prob) {
barplot(pct, names.arg = auteurs, main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,lgdbad), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
if (tofile) {
pdf(file = "CommitsPerAuthorPercent.pdf", width=7, height=5) # 1920/1080 full HD png
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
if (prob) {
barplot(pct, names.arg = auteurs, main="Commits per author (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="", ylab="% of commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,lgdbad), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = auteurs, main="Commits par auteurs",
xlab="", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
}
x <- read.table("commitsPA.txt", header = FALSE)
head(x)
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
x <- data.frame(Date = as.character(row.names(x)), x)
attach(x)
x
Sys.getlocale("LC_TIME")
dt <- as.Date(Date) # convert to Date
Sys.getlocale("LC_TIME")
dt <- as.Date(Date) # convert to Date
t
dt
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y")
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%b %y")
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%B %y")
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
pdf(file = "CommitsPerDate.pdf", width=7, height=5) # 1920/1080 full HD png
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y")
dev.off() # close file
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y")
axis.Date(1, at = dt, format = "%d %b %y", cex=0.3)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex=0.3)
?axis.Date
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.3)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.3)
pdf(file = "CommitsPerDate.pdf", width=7, height=5) # 1920/1080 full HD png
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.3)
dev.off() # close file
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", las=2)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.5)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.6)
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.6, las=2)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.6, las=2)
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.7)
pdf(file = "CommitsPerDate.pdf", width=7, height=5) # 1920/1080 full HD png
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.7)
dev.off() # close file
pdf(file = "CommitsPerDate.pdf", width=8, height=5) # 1920/1080 full HD png
plot(dt, nb, type="b", pch=20, xaxt = "n", xlab = "Date", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b %y", cex.axis=0.7)
dev.off() # close file
w <- getwd()
w
source('~/visulog/cli/CommitsPerDate2.R')
x
x
w <- getwd()
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
x <- read.table("commitsPerDate.txt", header = FALSE)
colnames(x) <- c("Date", "nb")
x
x
attach(x)
x# handling Date with local system time
Sys.getlocale("LC_TIME")
dt <- as.Date(Date, "%Y%m%d") # convert to Date
dt
source('~/Desktop/CommitsPerDate2.R')
w
source('~/Desktop/CommitsPerDate2.R')
source('~/Desktop/CommitsPerDate2.R')
dt
source('~/Desktop/CommitsPerDate2.R')
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPerDate.txt", header = FALSE)
colnames(x) <- c("Date", "nb")
x <- data.frame(Date = as.character(row.names(x)), x)
attach(x)
Sys.getlocale("LC_TIME")
dt <- as.Date(Date,"%Y-%m-%d") # convert to Date
dt
x
x
attach(x)
w <- getwd()
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
x <- read.table("commitsPerDate.txt", header = FALSE)
x
colnames(x) <- c("Date", "nb")
x
x
attach(x)
x# handling Date with local system time
Sys.getlocale("LC_TIME")
dt <- as.Date(Date, "%Y-%m-%d") # convert to Date
dt
setwd("../")
setwd(".graphs")
ymt <- substr(Date, 1, 7)
ind <- table(ymt)
nl <- length(ind) # nb of months in data
start <- 1
for (i in 1:nl) { # for each year-month
dtfig <- dt[start:(start + ind[i]-1)]
nbfig <- nb[start:(start + ind[i]-1)]
fname <- paste("CommitsPerDate_", i, ".pdf", sep="")
pdf(file = fname, width=9, height=7) # 1920/1080 full HD png
plot(dtfig, nbfig, type="b", pch = 20, xaxt = "n", xlab = "Jour du mois", ylab="Commits")
axis.Date(1, at = dtfig, format = "%d %b", cex.axis=1)  # set %B for full months
title(paste("Periode:", names(ind[i])))
dev.off() # close file
start <- start + ind[i]
}
source('~/visulog/cli/CommitsPerDate2.R')
source('~/visulog/cli/CommitsPerDate.R')
w <- getwd()
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
source('~/visulog/cli/CommitsPerDate.R')
w <- getwd()
w
x <- read.table("commitsPerDate.txt", header = FALSE)
auteurs
?pdf
source('~/Desktop/CommitsPerDate2.R')
w <- getwd()
w
w
setwd("/Users/cyprien/visulog/cli")
setwd(".visulogRTempFiles")
w <- getwd()
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPerMonth.txt", header = FALSE)
colnames(x) <- c("Date", "nb")
x <- data.frame(Date = as.character(row.names(x)), x)
attach(x)
w
setwd(".visulogRTempFiles")
setwd(".visulogRTempFiles")
w
setwd(".visulogRTempFiles")
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
x <- read.table("commitsPerMonth.txt", header = FALSE)
colnames(x) <- c("Date", "nb")
attach(x)
x
Sys.getlocale("LC_TIME")
dt <- as.Date(Date, "%Y-%m-%d") # convert to Date
w <- getwd()
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
x <- read.table("commitsPerMonth.txt", header = FALSE)
colnames(x) <- c("nb", "Date")
attach(x)
x
Sys.getlocale("LC_TIME")
dt <- as.Date(Date, "%Y-%m-%d") # convert to Date
setwd("../")
setwd(".graphs")
ymt <- substr(Date, 1, 7)
ind <- table(ymt)
nl <- length(ind) # nb of months in data
start <- 1
pdf(file = "CommitsPerMonth.pdf", width=9, height=7) # 1920/1080 full HD png
plot(dt, nb, type="l", pch = 20, xaxt = "n", xlab = "Month", ylab="Commits")
axis.Date(1, at = dt, format = "%d %b", cex.axis=1)  # set %B for full months
w <- getwd()
w
w
setwd("/Users/cyprien/visulog/cli/.visulogRTempFiles")
x <- read.table("commitsPerDate2.txt", header = FALSE)
x <- read.table("commitsPerDate.txt", header = FALSE)
colnames(x) <- c("Date", "nb")
attach(x)
Sys.getlocale("LC_TIME")
dt <- as.Date(Date) # convert to Date
setwd("../")
ymt <- substr(Date, 1, 7)
ind <- table(ymt)
nl <- length(ind) # nb of months in data
start <- 1
pdf(file = fname, width=9, height=7) # 1920/1080 full HD png
plot(dt, nb, type="b", pch = 20, xaxt = "n", xlab = "Jour du mois", ylab="Commits")
axis.Date(1, at = dtfig, format = "%d %b", cex.axis=1)  # set %B for full months
x
?plot.window
?plot
nb
dt
x
