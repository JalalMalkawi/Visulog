ls()
?rm
rm(list = ls())
ls()
ls()
x <- read.table("../commitsPA.txt", header = FALSE, row.names = 1)
x
class(x)
colnames(x) <- "commits"
x
x
commits
is.list(x)
x[[1]]
x$commits
attach(x)
ls()
commits
mean(commits)
colnames(x) <- "nb"
x
commits
detach(x)
commits
attach(x)
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pct
sum(nb)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.8  # bar names size, adapt to nb of bars
lgdbon <- paste("bon (>", pcgood,"%)")
barplot(pct, names.arg = nom, main="Commits par auteurs",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
barplot(pct, names.arg = row.names(x), main="Commits par auteurs",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
abline(h = pcgood, lty=2, col=8) # visualize "good" level...
percents
prob
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
abline(h = pcgood, lty=2, col=8) # visualize "good" level...
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
}
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
abline(h = pcgood, lty=2, col=8) # visualize "good" level...
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits" ,
cex.names = cnames, cex.lab=clab)
}
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
abline(h = pcgood, lty=2, col=8) # visualize "good" level...
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)
}
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)
}
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)}
ls()
x <- read.table("../commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.8  # bar names size, adapt to nb of bars
lgdbon <- paste("bon (>", pcgood,"%)")
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
if (prob) then {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)} else {a=1}
if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {a=1}
if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
if (! tofile) if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
tofile <- TRUE # set to FALSE to print in RStudio
if (! tofile) if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab)}
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generation.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generationPercent.R')
source('~/visulog/cli/barplot_generation.R')
source('~/visulog/cli/barplot_generation.R')
x <- read.table("../commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- TRUE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
nbauth <- data.frame(table(nb))
nbauth
setwd("cli/.visulogRTempFiles")
w <- getwd()
w <- getwd()
w
w <- getwd()
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
cl[cl == 0] <- 3   # green
clab <- 1.4    # label size, 1 = default size
cnames <- 0.1  # bar names size, adapt to nb of bars
lgdbon <- paste("bon (>", pcgood,"%)")
if (! tofile) if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="auteurs", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
if (tofile) {
pdf(file = "CommitsPerAuthor.png", width=1920, height=1080) # 1920/1080 full HD png
clab <- 1.4    # label size, 1 = default size
cnames <- 0.7  # bar names size, adapt to nb of bars
if (prob) {
barplot(pct, names.arg = row.names(x), main="Commits par auteurs (%)",
ylim = c(0, min(c(100, max(pct)+10))),
xlab="auteurs", ylab="% de commits" ,
cex.names = cnames, cex.lab=clab, col=cl, las = 2)
legend("topleft", legend = c(lgdbon,"mauvais"), fill=3:2,
bg = "antiquewhite")
# visualize "good" level...
abline(h = pcgood, lty=2, col=8)
} else {
barplot(nb, names.arg = row.names(x), main="Commits par auteurs",
xlab="", ylab="nombre de commits",
cex.names = cnames, cex.lab=clab, las = 2)}
dev.off() # close file
}
w <- getwd()
w
w <- getwd()
w
setwd(".visulogRTempFiles")
setwd("../")
o <- getwd()
o
x <- read.table("commitsPA.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
tofile <- TRUE # set to FALSE to print in RStudio
pct <- 100*nb/sum(nb) # normalize to empirical probabilities (%)
pcgood <- 10 # level qualifying what "good" means
cl <- (pct < pcgood)*2 # red
w <- getwd()
w
setwd(".visulogRTempFiles")
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
attach(x)
prob <- FALSE # set to TRUE if barplot(%) desired
library(ggplot2)
require(ggplot2)
res <- require(ggplot2)
res
if (res <- require(ggplot2) == FALSE) {
cat("toto")
}
if (res <- require(ggplot2) == FALSE) {
install.packages(ggplot2)
}
?install.packages
if (res <- require(ggplot2) == FALSE) {
install.packages("ggplot2")
}
if (res <- require(ggplot2) == FALSE) {
install.packages("ggplot2")
}
if (res <- require(ggplot2) == FALSE) {
install.packages("ggplot2")
}
require(ggplot2)
library(ggplot2)
if (res <- require(ggplot2) == FALSE) {
install.packages("ggplot2")
}
if (res <- require(ggplot2) == FALSE) {
install.packages("ggplot2", dependencies = TRUE)
}
detach(x)
x
summary(x)
nb
attach(x)
nb
row.names(x)
class(row.names(x))
dt <- row.names(x)
dt
dt <- as.Date(row.names(x))
Sys.getlocale()
Sys.getlocale("LC_TIME")
dt <- as.Date(row.names(x))
dt
plot(dt, nb, type="b")
plot(dt, nb, type="b", pch=20)
class(dt)
print(dt)
print(dt,2)
yr <- substr(dt, 1,4)
yr
mt <- substr(dt, 6,1)
mt
?substr
mt <- substr(dt, 6,7)
mt
text(dt[3],0, mt[3])
mt[3]
text(dt[3],-1, mt[3])
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[3],-1, mt[3])
dt
text(dt[15],-1, mt[15])
text(dt[7],-1, mt[7])
?as.Date
dt <- as.Date(row.names(x), "%d%b%Y") # convert to Date
dt
row.names(x)
as.numeric(row.names(x))
row.names(x)
as.numeric(row.names(x))
as.numeric( as.Date(row.names(x)))
dt <- as.Date(row.names(x), "%Y%b%d") # convert to Date
dt
x
dt <- as.Date(row.names(x), "%Y-%b-%d") # convert to Date
dt
dt <- as.Date(row.names(x), "%Y-%m-%d") # convert to Date
dt
row.names(x)
mt
mt[mt == "08"] <- "aug"
text(dt[3],-1, mt[3])
text(dt[7],-1, mt[7])
mt[mt == "09"] <- "sept"
text(dt[3],-1, mt[3])
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[3],-1, mt[3])
text(dt[7],-1, mt[7])
text(dt[15],-1, mt[15])
mt <- substr(dt, 6,7)
mt[mt == "08"] <- "aug"
mt[mt == "09"] <- "sep"
mt[mt == "10"] <- "oct"
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[3],-1, mt[3])
text(dt[7],-1, mt[7])
text(dt[15],-1, mt[15])
mt[15]
?text
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[3],-1, mt[3], pos=3)
text(dt[3],-2, mt[3], pos=3)
text(dt[7],-2, mt[7], pos=3)
text(dt[15],-2, mt[15], pos=3)
mt[mt == "11"] <- "nov"
seq(1, length(dt), by = 6)
ind <- seq(1, length(dt), by = 6)
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
ind <- seq(1, length(dt), by = 6)
text(dt[ind],-2, mt[ind], pos=3)
ind <- seq(1, length(dt), by = 12)
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[ind],-2, mt[ind], pos=3)
dt
which(mt == "nov")
plot.ts(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
plot.ts(dt, nb)
plot.ts(dt, nb, xy.labels = TRUE)
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
text(dt[ind],-2, mt[ind], pos=3)
plot.ts(dt, nb, ann=T)
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
plot.ts(dt, nb, month=T)
xts <- ts(x)
warnings()
x
xts <- ts(data.frame(row.names(x), nb))
xts
row.names(x)
plot(xts)
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
w <- getwd()
w
w <- getwd()
w
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
dd <- row.names(x)
x <- data.frame(dd, x)
x
attach(x)
Sys.getlocale("LC_TIME")
dt <- as.Date(dd) # convert to Date
plot(dt, nb, type="b", pch=20, ylim=c(min(nb)-2, max(nb)))
yr <- substr(dt, 1,4)
mt <- substr(dt, 6,7)
mt[mt == "08"] <- "aug"
mt[mt == "09"] <- "sep"
mt[mt == "10"] <- "oct"
mt[mt == "11"] <- "nov"
text(dt[ind],-2, mt[ind], pos=3)
plot(dt, nb, type="b", pch=20)
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
x <- data.frame(Date = row.names(x), x)
attach(x)
etach(x)
detach(x)
detach(x)
dd
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
x <- data.frame(Date = row.names(x), x)
attach(x)
x
plot(dt, nb, type="b", pch=20)
dt <- as.Date(Date) # convert to Date
plot(dt, nb, type="b", pch=20)
t
summary(x)
x <- data.frame(Date = as.character(row.names(x)), x)
detach(x)
attach(x)
summary(x)
rm(x)
x <- read.table("commitsPerDate.txt", header = FALSE, row.names = 1)
colnames(x) <- "nb"
summary(x)
x <- data.frame(Date = as.character(row.names(x)), x)
summary(x)
Sys.getlocale("LC_TIME")
dt <- as.Date(Date) # convert to Date
dt
plot(dt, nb, type="b", pch=20)
plot(dt, nb, type="b", pch=20)
class(dt)
plot(dt, nb, type="b", pch=20, xlab = "Date", ylab="Commits")
source('~/Desktop/Rtesting/CommitsPerDate.R')
source('~/visulog/cli/CommitsPerDate.R')
